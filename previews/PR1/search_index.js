var documenterSearchIndex = {"docs":
[{"location":"contributing/#Contributing-guidelines","page":"Contributing","title":"Contributing guidelines","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"First of all, thanks for the interest!","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"We welcome all kinds of contribution, including, but not limited to code, documentation, examples, configuration, issue creating, etc.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Be polite and respectful.","category":"page"},{"location":"contributing/#Bug-reports-and-discussions","page":"Contributing","title":"Bug reports and discussions","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"If you think you found a bug, feel free to open an issue. Focused suggestions and requests can also be opened as issues. Before opening a pull request, start an issue or a discussion on the topic, please.","category":"page"},{"location":"contributing/#Working-on-an-issue","page":"Contributing","title":"Working on an issue","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"If you found an issue that interests you, comment on that issue what your plans are. If the solution to the issue is clear, you can immediately create a pull request (see below). Otherwise, say what your proposed solution is and wait for a discussion around it.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"TipFeel free to ping us after a few days if there are no responses.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"If your solution involves code (or something that requires running the package locally), check the developer documentation. Otherwise, you can use the GitHub interface directly to create your pull request.","category":"page"},{"location":"developer/#Developer-documentation","page":"Dev setup","title":"Developer documentation","text":"","category":"section"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"If you haven't, please read the Contributing guidelines first.","category":"page"},{"location":"developer/#Linting-and-formatting","page":"Dev setup","title":"Linting and formatting","text":"","category":"section"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"Install a plugin on your editor to use EditorConfig. This will ensure that your editor is configured with important formatting settings.","category":"page"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"We use https://pre-commit.com to run the linters and formatters. In particular, the Julia code is formatted using JuliaFormatter.jl, so please install it globally first.","category":"page"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"To install pre-commit, we recommend using pipx as follows:","category":"page"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"# Install pipx following the link\npipx install pre-commit","category":"page"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"With pre-commit installed, activate it as a pre-commit hook:","category":"page"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"pre-commit install","category":"page"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"To run the linting and formatting manually, enter the command below:","category":"page"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"pre-commit run -a","category":"page"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"Now, you can only commit if all the pre-commit tests pass.","category":"page"},{"location":"developer/#First-time-clone","page":"Dev setup","title":"First time clone","text":"","category":"section"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"If this is the first time you work with this repository, follow the instructions below to clone the repository.","category":"page"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"Fork this repo\nClone your repo (this will create a git remote called origin)\nAdd this repo as a remote:\ngit remote add orgremote https://github.com/JuliaSmoothOptimizers/JSOSolverSkeleton.jl","category":"page"},{"location":"developer/#Working-on-a-new-issue","page":"Dev setup","title":"Working on a new issue","text":"","category":"section"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"Fetch from the JSO remote and fast-forward your local main\ngit fetch orgremote\ngit switch main\ngit merge --ff-only orgremote/main\nBranch from main to address the issue (see below for naming)\ngit switch -c 42-add-answer-universe\nPush the new local branch to your personal remote repository\ngit push -u origin 42-add-answer-universe\nCreate a pull request to merge your remote branch into the org main.","category":"page"},{"location":"developer/#Branch-naming","page":"Dev setup","title":"Branch naming","text":"","category":"section"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"If there is an associated issue, add the issue number.\nIf there is no associated issue, and the changes are small, add a prefix such as \"typo\", \"hotfix\", \"small-refactor\", according to the type of update.\nIf the changes are not small and there is no associated issue, then create the issue first, so we can properly discuss the changes.\nUse dash separated imperative wording related to the issue (e.g., 14-add-tests, 15-fix-model, 16-remove-obsolete-files).","category":"page"},{"location":"developer/#Commit-message","page":"Dev setup","title":"Commit message","text":"","category":"section"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"Use imperative or present tense, for instance: Add feature or Fix bug.\nHave informative titles.\nIf necessary, add a body with details.","category":"page"},{"location":"developer/#Before-creating-a-pull-request","page":"Dev setup","title":"Before creating a pull request","text":"","category":"section"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"[Advanced] Try to create \"atomic git commits\" (recommended reading: The Utopic Git History).\nMake sure the tests pass.\nMake sure the pre-commit tests pass.\nFetch any main updates from upstream and rebase your branch, if necessary:\nbash  git fetch orgremote  git rebase orgremote/main BRANCH_NAME\nThen you can open a pull request and work with the reviewer to address any issues.","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [JSOSolverSkeleton]","category":"page"},{"location":"reference/#JSOSolverSkeleton.SimpleUncSolver","page":"Reference","title":"JSOSolverSkeleton.SimpleUncSolver","text":"simple_unc_solver(nlp; options...)\n\nTemplate for an unconstrained solver using the first order conditions\n\n‖∇f(xₖ)‖ ≤ ϵₐ + ϵᵣ‖∇f(x₀)‖,\n\nwhere ϵₐ is an absolute tolerance and ϵᵣ is a relative tolerance.\n\nFor advanced usage, create a SimpleUncSolver to preallocate the memory used in the algorithm, and then call solve!.\n\nsolver = SimpleUncSolver(nlp)\nsolve!(solver, nlp; kwargs...)\n\nArguments\n\nnlp::AbstractNLPModel{T, V} represents the model to solve, see NLPModels.jl.\n\nThe keyword arguments may include\n\nx::V = nlp.meta.x0: the initial guess.\natol::T = √eps(T): absolute tolerance.\nrtol::T = √eps(T): relative tolerance, the algorithm stops when ‖∇f(xᵏ)‖ ≤ atol + rtol * ‖∇f(x⁰)‖.\nmax_eval::Int = -1: maximum number of objective function evaluations.\nmax_time::Float64 = 30.0: maximum time limit in seconds.\nmax_iter::Int = typemax(Int): maximum number of iterations.\nverbose::Int = 0: if > 0, display iteration details every verbose iteration.\n\nOutput\n\nThe returned value is a GenericExecutionStats, see SolverCore.jl.\n\nCallback\n\nThe callback is called at each iteration. The expected signature of the callback is callback(nlp, solver, stats), and its output is ignored. Changing any of the input arguments will affect the subsequent iterations. In particular, setting stats.status = :user will stop the algorithm. All relevant information should be available in nlp and solver. Notably, you can access, and modify, the following:\n\nsolver.x: current iterate;\nsolver.gx: current gradient;\nstats: structure holding the output of the algorithm (GenericExecutionStats), which contains, among other things:\nstats.dual_feas: norm of current gradient;\nstats.iter: current iteration counter;\nstats.objective: current objective function value;\nstats.status: current status of the algorithm. Should be :unknown unless the algorithm has found a stopping criteria. Changing this to anything will stop the algorithm, but you should use :user to properly indicate the intention.\nstats.elapsed_time: elapsed time in seconds.\n\nExamples\n\nusing JSOSolverSkeleton, ADNLPModels\nnlp = ADNLPModel(x -> sum(x.^2), ones(3))\nstats = simple_unc_solver(nlp)\n\n# output\n\n\"Execution stats: first-order stationary\"\n\nusing JSOSolverSkeleton, ADNLPModels\nnlp = ADNLPModel(x -> sum(x.^2), ones(3))\nsolver = SimpleUncSolver(nlp)\nstats = solve!(solver, nlp)\n\n# output\n\n\"Execution stats: first-order stationary\"\n\n\n\n\n\n","category":"type"},{"location":"reference/#JSOSolverSkeleton.simple_unc_solver-Union{Tuple{NLPModels.AbstractNLPModel{T, V}}, Tuple{V}, Tuple{T}} where {T, V}","page":"Reference","title":"JSOSolverSkeleton.simple_unc_solver","text":"simple_unc_solver(nlp; options...)\n\nTemplate for an unconstrained solver using the first order conditions\n\n‖∇f(xₖ)‖ ≤ ϵₐ + ϵᵣ‖∇f(x₀)‖,\n\nwhere ϵₐ is an absolute tolerance and ϵᵣ is a relative tolerance.\n\nFor advanced usage, create a SimpleUncSolver to preallocate the memory used in the algorithm, and then call solve!.\n\nsolver = SimpleUncSolver(nlp)\nsolve!(solver, nlp; kwargs...)\n\nArguments\n\nnlp::AbstractNLPModel{T, V} represents the model to solve, see NLPModels.jl.\n\nThe keyword arguments may include\n\nx::V = nlp.meta.x0: the initial guess.\natol::T = √eps(T): absolute tolerance.\nrtol::T = √eps(T): relative tolerance, the algorithm stops when ‖∇f(xᵏ)‖ ≤ atol + rtol * ‖∇f(x⁰)‖.\nmax_eval::Int = -1: maximum number of objective function evaluations.\nmax_time::Float64 = 30.0: maximum time limit in seconds.\nmax_iter::Int = typemax(Int): maximum number of iterations.\nverbose::Int = 0: if > 0, display iteration details every verbose iteration.\n\nOutput\n\nThe returned value is a GenericExecutionStats, see SolverCore.jl.\n\nCallback\n\nThe callback is called at each iteration. The expected signature of the callback is callback(nlp, solver, stats), and its output is ignored. Changing any of the input arguments will affect the subsequent iterations. In particular, setting stats.status = :user will stop the algorithm. All relevant information should be available in nlp and solver. Notably, you can access, and modify, the following:\n\nsolver.x: current iterate;\nsolver.gx: current gradient;\nstats: structure holding the output of the algorithm (GenericExecutionStats), which contains, among other things:\nstats.dual_feas: norm of current gradient;\nstats.iter: current iteration counter;\nstats.objective: current objective function value;\nstats.status: current status of the algorithm. Should be :unknown unless the algorithm has found a stopping criteria. Changing this to anything will stop the algorithm, but you should use :user to properly indicate the intention.\nstats.elapsed_time: elapsed time in seconds.\n\nExamples\n\nusing JSOSolverSkeleton, ADNLPModels\nnlp = ADNLPModel(x -> sum(x.^2), ones(3))\nstats = simple_unc_solver(nlp)\n\n# output\n\n\"Execution stats: first-order stationary\"\n\nusing JSOSolverSkeleton, ADNLPModels\nnlp = ADNLPModel(x -> sum(x.^2), ones(3))\nsolver = SimpleUncSolver(nlp)\nstats = solve!(solver, nlp)\n\n# output\n\n\"Execution stats: first-order stationary\"\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = JSOSolverSkeleton","category":"page"},{"location":"#JSOSolverSkeleton","page":"Home","title":"JSOSolverSkeleton","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for JSOSolverSkeleton.","category":"page"}]
}
